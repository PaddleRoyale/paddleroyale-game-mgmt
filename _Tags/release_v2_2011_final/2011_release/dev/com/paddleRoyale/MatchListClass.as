package  paddleRoyale{		import flash.display.MovieClip;	import paddleRoyale.PaddleRoyaleModel;	import com.greensock.TweenMax;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.geom.Point;	import soulwire.display.PaperSprite;	import flash.display.Sprite;	import flash.display.Shape;	import com.pixelbreaker.ui.osx.MacMouseWheel;		public class MatchListClass extends MovieClip{		private var _model:PaddleRoyaleModel;		public var scrollArea:Rectangle;		public var point:Point;		public var listItemArray:Array;		private var indicatorButtons:Array;		public function MatchListClass() {			point = new Point(this.x, this.y);			_model = PaddleRoyaleModel.getInstance();			//MacMouseWheel.getInstance();			listItemArray=new Array();			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, init);			//MacMouseWheel.setup( this.stage );			this.addEventListener(MouseEvent.MOUSE_WHEEL, updateScroll);					}				var _row=0;		var _col=0;		public function populateList():void{			point = new Point(this.x, this.y);			for(var i=0; i< _model.matchListArray.length; i++){								var listItem:LineItemClip = new LineItemClip();				listItem.y = i * (listItem.height + 10);												/*				listItem.togglePower.scaleX = listItem.togglePower.scaleY = .7;				listItem.togglePulse.scaleX = listItem.togglePulse.scaleY = .7;				listItem.toggleLastCall.scaleX = listItem.toggleLastCall.scaleY = .7;				listItem.togglePower.addEventListener(MouseEvent.MOUSE_OVER, indicatorOvr);				listItem.togglePower.addEventListener(MouseEvent.MOUSE_OUT, indicatorOut);				listItem.togglePower.addEventListener(MouseEvent.CLICK, indicatorClick);				listItem.togglePower.isOn=1;				listItem.togglePower.buttonMode = true;				listItem.togglePulse.addEventListener(MouseEvent.MOUSE_OVER, indicatorOvr);				listItem.togglePulse.addEventListener(MouseEvent.MOUSE_OUT, indicatorOut);				listItem.togglePulse.addEventListener(MouseEvent.CLICK, indicatorClick);				listItem.togglePulse.isOn=1;				listItem.togglePulse.buttonMode = true;				listItem.toggleLastCall.addEventListener(MouseEvent.MOUSE_OVER, indicatorOvr);				listItem.toggleLastCall.addEventListener(MouseEvent.MOUSE_OUT, indicatorOut);				listItem.toggleLastCall.addEventListener(MouseEvent.CLICK, indicatorClick);				listItem.toggleLastCall.isOn=1;				listItem.toggleLastCall.buttonMode = true;								*/							listItem.itemListCount.text = i+1;				listItem.player1Text.text = getPlayerName( _model.matchListArray[i].matchPlayerTopID );				listItem.player2Text.text = getPlayerName( _model.matchListArray[i].matchPlayerBotID );				_model.gamePlayedToggleArray = false ;								//added for controller				for(var j=0; j<_model.tableClipsArray.length; j++){				//for(var j=0; j<8; j++){					_row = j % 4;					_col = Math.floor( j / 4);										var tbc:TableID = new TableID();					tbc.scaleX = tbc.scaleY = .75;					tbc.x = _row * (tbc.width+5);					tbc.y = _col * (tbc.width+5);					tbc.numeral.text = j+1;					tbc.matchID = _model.matchListArray[i].matchID;					tbc.gamePlayedID = i;					tbc.id=j+1;					tbc.hitBtn.addEventListener(MouseEvent.CLICK, updateTable);					tbc.hitBtn.buttonMode=true;					listItem.tableEC.addChild(tbc);				}								//winner markers				if( int(_model.matchListArray[i].matchPlayerTopID) == int(_model.matchListArray[i].matchWinnerID)   && (int(_model.matchListArray[i].matchWinnerID) != 0 || _model.matchListArray[i].matchWinnerID != "")){					TweenMax.to(listItem.winner1, 0, {tint:0x000033, alpha:1});//0x222222				}				if( int(_model.matchListArray[i].matchPlayerBotID) == int(_model.matchListArray[i].matchWinnerID) && ( int(_model.matchListArray[i].matchWinnerID) != 0 || _model.matchListArray[i].matchWinnerID != "")){					TweenMax.to(listItem.winner2, 0, {tint:0x000033, alpha:1});				}								//complete indicator				if( _model.matchListArray[i].matchStatus == "complete" ){					_model.gamePlayedToggleArray[i] = true ;					TweenMax.to(listItem.itemBGClip, 0, { tint:0x660000 });				}else if(_model.gamePlayedToggleArray[i] == true ){					TweenMax.to(listItem.itemBGClip, 0, { tint:0x004900 });				}								//trace(i + " Winner ID: " + _model.matchListArray[i].matchWinnerID);				//trace(_model.matchListArray[i].matchPlayerTopID +"     " + _model.matchListArray[i].matchPlayerBotID);								listItem.matchIDText.text = _model.matchListArray[i].matchID;				lineItemContainer.addChild(listItem);				listItemArray.push(listItem);			}					}				private function indicatorOvr(e:MouseEvent=null):void{			TweenMax.to(e.currentTarget, .3, {scaleX:1, scaleY:1});		}		private function indicatorOut(e:MouseEvent=null):void{			TweenMax.to(e.currentTarget, .2, {scaleX:.7, scaleY:.7});		}		private function indicatorClick(e:MouseEvent=null):void{							if(e.currentTarget.name == "togglePower" && e.currentTarget.isOn==1){					//e.currentTarget.parent.parent.parent.parent.parent.sendTableLightSwitchCall(1);					trace(e.currentTarget.name + e.currentTarget.isOn)					TweenMax.to(e.currentTarget, .5, {tint:0x00ff00});				} else if(e.currentTarget.name == "togglePulse" && e.currentTarget.isOn==1){					//e.currentTarget.parent.parent.parent.parent.parent.sendTablePulseSwitchCall(1);					TweenMax.to(e.currentTarget, .5, {tint:0x00ff00});				}else if(e.currentTarget.name == "toggleLastCall" && e.currentTarget.isOn==1){					//e.currentTarget.parent.parent.parent.parent.parent.sendLastCallSwitchCall(1);					TweenMax.to(e.currentTarget, .5, {tint:0x00ff00});				}else{					TweenMax.to(e.currentTarget, .5, {tint:null});				}				e.currentTarget.isOn*=-1;		}				public function openList():void{			TweenMax.to(this, 1, {autoAlpha:1});		}				public function closeList():void{			TweenMax.to(this, 1, {autoAlpha:0});		}				private function updateTable(e:MouseEvent):void{			//trace(e.currentTarget.parent.gamePlayedID);			_model.gamePlayedToggleArray[e.currentTarget.parent.gamePlayedID] = true;			//TweenMax.to(e.currentTarget.parent.parent.parent.itemBGClip, 0, {tint:0x550000});			TweenMax.to(e.currentTarget.parent.parent.parent.parent.parent.parent.parent.smokeScreen, .5, {autoAlpha:1});			e.currentTarget.parent.parent.parent.parent.parent.parent.parent.sendTablePing( e.currentTarget.parent.id, e.currentTarget.parent.matchID );		}				private function getPlayerName( playerID:int ):String{			var theName:String="";			for(var i:int=0; i< _model.playerNameList.length; i++){				if( _model.playerNameList[i].playerID == playerID ){					theName = _model.playerNameList[i].fname + " “"+ _model.playerNameList[i].nickname + "” "+ _model.playerNameList[i].lname;  					break;				}			}			return theName;		}				private function updateScroll(e:MouseEvent):void{			trace(e.delta + "   bubDub");					}	}	}