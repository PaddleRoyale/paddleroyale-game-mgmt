package paddleRoyale{	import paddleRoyale.PaddleUtilClass;			import paddleRoyale.PaddleRoyaleModel;	import paddleRoyale.PaddleEvents;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.Event;	import flash.display.MovieClip;	public class XMLHandler extends MovieClip	{		private var _model:PaddleRoyaleModel;		private var _utils:PaddleUtilClass;		private static var _instance:XMLHandler;				private var matchXMLLoader:URLLoader;		private var playerXMLLoader:URLLoader;		private var matchesLoaded:Boolean=false;		private var playersLoaded:Boolean=false;		//private var matchXMLRequest:URLRequest = new URLRequest("https://challonge.com/api/tournaments/deathmatch_2011_novice/matches?api_key=jq4i8i55fsntmhw4ip748ym2j2r3qiyuex3xwscp");		//private var playerXMLRequest:URLRequest = new URLRequest("https://challonge.com/api/tournaments/deathmatch_2011_novice/participants?api_key=jq4i8i55fsntmhw4ip748ym2j2r3qiyuex3xwscp")		private var matchXMLRequest:URLRequest = new URLRequest("https://challonge.com/api/tournaments/paddle_royale/matches?api_key=jq4i8i55fsntmhw4ip748ym2j2r3qiyuex3xwscp");		private var playerXMLRequest:URLRequest = new URLRequest("https://challonge.com/api/tournaments/paddle_royale/participants?api_key=jq4i8i55fsntmhw4ip748ym2j2r3qiyuex3xwscp")		public function XMLHandler( singleton:SingletonEnforcer )		{			_model = PaddleRoyaleModel.getInstance();			_utils = new PaddleUtilClass();			initXML();		}				public static function getInstance():XMLHandler		{			if (_instance == null)			{				_instance = new XMLHandler( new SingletonEnforcer() );			}			return _instance;		}		private function initXML():void		{			addEventListener(Event.ENTER_FRAME, checkIfAllXMLLoaded);			//Load Matches XML			matchXMLLoader = new URLLoader();			matchXMLLoader.load( matchXMLRequest );			matchXMLLoader.addEventListener(Event.COMPLETE, processMatchXML);						//Load participants XML			playerXMLLoader = new URLLoader();			playerXMLLoader.load( playerXMLRequest );			playerXMLLoader.addEventListener(Event.COMPLETE, processPlayerXML);		}		private function processMatchXML(e:Event):void{			_model.matchXML = XML( e.target.data );//trace(_model.matchXML);			//trace(_model.matchXML)			var matchList:XMLList = _model.matchXML.children();			var matchItem:XML;			for each(matchItem in matchList){				_model.matchListArray.push({										   		matchID: int(matchItem.id[0]),												matchRound: matchItem['round'][0],												matchStatus: matchItem['state'][0],												matchPlayerTopID: int(matchItem['player1-id'][0]),												matchPlayerBotID: int(matchItem['player2-id'][0]),												matchWinnerID: int(matchItem['winner-id'][0])										   });										   				//trace("INITIAL DATA: matchID: "+ int(matchItem.id[0]) +"  |   " + matchItem['player1-id'][0] + " vs " + matchItem['player2-id'][0] + "  |   winner: " + matchItem['winner-id'][0]  );			}			matchesLoaded=true;			//trace(_model.matchListArray.length);		}				private function processPlayerXML(e:Event):void{			_model.playerXML = XML( e.target.data );			var players:XMLList = _model.playerXML.children();			var item:XML;			for each(item in players){				var fullName:Array = _utils.sanitizeArray( item.name[0].split(" ") );				//trace(fullName);								var xPlayerID:int = item.id[0];				var xFirstName:String = _utils.sanitizeString( fullName[0] );				var xLastName:String = _utils.sanitizeString( fullName[fullName.length-1] );								//handle nickname				var nickName:String="";				for(var i=0; i<=fullName.length-1; i++){					if(i>0 && i<fullName.length-1){ //isolate nickname only										if(fullName[i] == fullName[fullName.length-2]){							nickName += _utils.sanitizeString( fullName[i] );						}else{							nickName += _utils.sanitizeString( fullName[i] ) + " ";						}					}				}//trace(nickName);								_model.playerNameList.push({										   		fname: xFirstName,												lname: xLastName,												nickname: nickName,												playerID: xPlayerID										   });										   				nickName=""; //need to clean out nickname			}			playersLoaded=true;		}				private function checkIfAllXMLLoaded(e:Event):void{			if(matchesLoaded==true && playersLoaded==true){				removeEventListener(Event.ENTER_FRAME, checkIfAllXMLLoaded);				_model.dispatchEvent(new PaddleEvents( PaddleEvents.XML_LOADED ));			}		}				public function getPlayerData(id:Number=0, playerIndex:String="noPlayerSelected"):void		{					}		public function updateMatchXML():void		{			matchesLoaded=false;			_model.matchListArray.splice(0,_model.matchListArray.length);			matchXMLLoader.close();						matchXMLLoader.load( matchXMLRequest );			matchXMLLoader.addEventListener(Event.COMPLETE, updateMatchXMLHandler);		}				private function updateMatchXMLHandler(e:Event):void{			_model.matchListArray.splice(0,_model.matchListArray.length);			_model.matchXML = XML( e.target.data );//trace(_model.matchXML);			var matchList:XMLList = _model.matchXML.children();			var matchItem:XML;			for each(matchItem in matchList){								_model.matchListArray.push({										   		matchID: matchItem.id[0],												matchRound: matchItem['round'][0],												matchStatus: matchItem['state'][0],												matchPlayerTopID: matchItem['player1-id'][0],												matchPlayerBotID: matchItem['player2-id'][0],												matchWinnerID: matchItem['winner-id'][0]										   });			//trace("RELOADED DATA: matchID: "+ int(matchItem.id[0]) +"  |   " + matchItem['player1-id'][0] + " vs " + matchItem['player2-id'][0] + "  |   winner: " + matchItem['winner-id'][0]  );			}			_model.dispatchEvent(new PaddleEvents( PaddleEvents.XML_UPDATED ));		}	}}//SINGLETON ENFROCER CLASSclass SingletonEnforcer{;	public function SingletonEnforcer()	{	}}