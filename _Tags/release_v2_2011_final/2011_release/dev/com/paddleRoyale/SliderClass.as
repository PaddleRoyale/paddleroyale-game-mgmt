package  paddleRoyale{	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import fl.motion.easing.Back;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import flash.display.Stage;		public class SliderClass extends MovieClip{				private var bounds:Object;		private var offset;		private var isDragging:Boolean = false;		private var trackHeight;		private var vy:Number=0;		private var f:Number = .95;		private var currentY:Number;		private var lastY:Number;		private var percentVal:Number;			public function SliderClass(){			init();		}				private function init():void{			trackHeight = this.track.height;			bounds = {top:track.y, bot:(trackHeight-(scrubber.height-30)) + track.y };			currentY=scrubber.y;			lastY=scrubber.y;			//addEventListener(Event.ENTER_FRAME, ud);			scrubber.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);			addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);			//addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelEvent);			scrubber.buttonMode=true;		}		private function mouseWheelEvent(e:MouseEvent):void{			trace(e.delta);		}				private function mouseDownHandler(e:MouseEvent):void{						isDragging=true;			offset=scrubber.mouseY;			this.parent.addEventListener(MouseEvent.MOUSE_MOVE, moveHandler);		}				private function mouseUpHandler(e:MouseEvent):void{			this.parent.removeEventListener(MouseEvent.MOUSE_MOVE, moveHandler);			isDragging=false;		}				private function moveHandler(e:MouseEvent):void{			scrubber.y = mouseY - offset;			if(scrubber.y <= bounds.top){				scrubber.y = bounds.top;			}else if(scrubber.y >= bounds.bot){				scrubber.y = bounds.bot;			}			ud();			e.updateAfterEvent();		}				private function ud(e:Event=null):void{			if(isDragging){				lastY = currentY;				currentY = mouseY;				vy = currentY - lastY;			}else{				scrubber.y += vy;			}						if(scrubber.y <= bounds.top){				scrubber.y = bounds.top;				vy*=-1;			}else if(scrubber.y >= bounds.bot){				scrubber.y = bounds.bot;				vy*=-1;			}			vy *= f;			if(Math.abs(vy)< .5){				vy=0;			}						percentVal = Math.round((scrubber.y-bounds.top)/(bounds.bot-bounds.top) * 100) / 100;						var newPos = -(this.parent["lineItemContainer"].height - (this.parent["theMask"].height)) * percentVal - 400;			TweenMax.to(this.parent["lineItemContainer"], 1, {y: newPos});						//e.currentTarget.parent.lineItemContainer.y = -(e.currentTarget.parent.theMask.height - (e.currentTarget.parent.point.y - e.currentTarget.parent.lineItemContainer.height * percentVal));						//e.currentTarget.parent.lineItemContainer.y = -(e.currentTarget.parent.lineItemContainer.height - (e.currentTarget.parent.theMask.height)) * percentVal - 400;						/*			var extraWidth:Number = LISTmc.width - stage.stageWidth;			  var percentage:Number = buttonLR.x / (stage.stageWidth - buttonLR.width )			  var newXPos:Number = - extraWidth * percentage;			  if (drag) {				TweenLite.to(LISTmc,1,{x:newXPos});			  }			*/						//trace(e.currentTarget.parent.point.y)		}	}	}