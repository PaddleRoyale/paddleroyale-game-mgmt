package  paddleRoyale.controlPanel{	//RECIEVE	import com.greensock.TweenMax;	import com.greensock.easing.*;		import flash.display.MovieClip;	import flash.net.LocalConnection;	import flash.events.Event;	import paddleRoyale.PaddleRoyaleModel;	import flash.events.StatusEvent;	import paddleRoyale.PaddleEvents;	import com.greensock.TweenMax;	import com.greensock.easing.*;			public class ControlPanelClass extends MovieClip{		public var controller_LocalConnection:LocalConnection;		private var _cModel:PaddleRoyaleModel;		private var theList:MatchListClip;		public function ControlPanelClass() {			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, init);			_cModel = PaddleRoyaleModel.getInstance();			TweenMax.to(this.smokeScreen, 0, {autoAlpha:0});			setupLocalConnections(); //localConn		}				public function getPaddleModel(e:Event=null):void{				theList = new MatchListClip();				theList.x = 500;				theList.y = 423;				theList.populateList();				theList.alpha=0;				emptyListContainer.addChild(theList);				theList.openList();		}				public function updateController(matchListVal:Array):void{			//updateData			lcUpdateMatchListArray( matchListVal );						TweenMax.to(this.smokeScreen, .7, {autoAlpha:0});						//NEED TO UPDATE THE ACTUAL DISPLAYOBJECT HERE!!!			emptyListContainer.removeChild(theList);			theList = undefined;			theList = new MatchListClip();			theList.x = 500;			theList.y = 423;			theList.populateList();			emptyListContainer.addChild(theList);		}				//_ALL LOCAL CONNECTION FUNCTIONS BELOW HERE___________________________________________________________________________		private function setupLocalConnections():void{			controller_LocalConnection = new LocalConnection();			controller_LocalConnection.client = this;			controller_LocalConnection.allowDomain("localhost");			addEventListener(Event.ENTER_FRAME, connectionUpdate);		}				private function connectionUpdate(e:Event):void{			try {					controller_LocalConnection.connect("fromMain");					e.target.removeEventListener(Event.ENTER_FRAME, connectionUpdate); 				} catch (error:ArgumentError) {					trace("Can't connect...the connection name is already being used by another SWF");				}		}  		private function statusHandler(e:StatusEvent):void{			if(e.level == "status"){				trace("CONTROL - connSUCESS");			}else if(e.level == "error"){				trace("CONTROL - connFAIL");			}		}				//LC FROM MAIN__________________________________________		public function lcUpdateMatchListArray(val:Array):void{			_cModel.matchListArrayWhole=[];			_cModel.matchListArrayWhole = val;			//trace("match TRANSFRD " + _cModel.matchListArray.length);		}				public function lcUpdatePlayerListArray(val:Array):void{			_cModel.playerNameListWhole=[];			_cModel.playerNameListWhole = val;			//trace("player TRANSFRD " + _cModel.playerNameList.length);		}				public function lcUpdateTableListArray(val:Array):void{			_cModel.tableClipsArrayWhole=[];			_cModel.tableClipsArrayWhole = val;			//trace("table TRANSFRD " + _cModel.tableClipsArray.length);		}				//LC TO MAIN__________________________________________		public function sendTablePing(id:int, matchID:int):void{			trace("Controller Call for Table: " + id + " MatchID:" + matchID)			controller_LocalConnection.send("fromControl", "remoteTableClickHandler", id, matchID);		}			public function sendTableLightSwitchCall(tableID:int):void{			controller_LocalConnection.send("fromControl", "remoteLightSwitch", tableID);		}		public function sendTablePulseSwitchCall(tableID:int):void{			controller_LocalConnection.send("fromControl", "remotePulseCall", tableID);		}		public function sendLastCallSwitchCall(tableID:int):void{			controller_LocalConnection.send("fromControl", "remoteLastCall", tableID);		}	}	}