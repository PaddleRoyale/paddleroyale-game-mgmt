package paddleRoyale {		import flash.display.MovieClip;	import flash.events.Event;	import paddleRoyale.TableLayoutClass;	import paddleRoyale.PaddleRoyaleModel;	import paddleRoyale.PaddleEvents;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import flash.net.LocalConnection;	import flash.events.StatusEvent;	import flash.utils.setTimeout;	import flash.net.SharedObject;	import flash.events.SyncEvent;	import flash.display.Stage;	import flash.events.MouseEvent;			public class MainClass extends MovieClip {				private var layout:TableLayoutClass;		private var _model:PaddleRoyaleModel;				private var main_localConnection:LocalConnection;		private var sharedObj:SharedObject;				public function MainClass() {			addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, init);			_model = PaddleRoyaleModel.getInstance();			initData();		}				private function initData():void{			layout = new TableLayoutClass( this );			_model.addEventListener( PaddleEvents.XML_LOADED, showTables );		}				private function showTables(e:Event):void{			_model.removeEventListener( PaddleEvents.XML_LOADED, showTables );			layout.drawTables();						sharedObj = SharedObject.getLocal("paddleRoyale", "/");						setupLocalConnection();								//matchList.populateList(); //need to unguide listClip		}		//SHARED OBJECT______________________________________________________________________________________________________________				private function initializeControllerData():void{			main_localConnection.send("fromMain", "lcUpdateMatchListArray", _model.matchListArray as Array);			main_localConnection.send("fromMain", "lcUpdatePlayerListArray", _model.playerNameList as Array);			main_localConnection.send("fromMain", "lcUpdateTableListArray", _model.tableClipsArray as Array);			main_localConnection.send("fromMain", "getPaddleModel");			sharedObj.flush(100000);		}				public function remoteTableClickHandler(table:int, matchID:int):void{			trace("Main Clip has received ping form controller: TABLE # " + table + " for match: " + matchID);			for(var i=0; i<_model.tableClipsArray.length; i++)			{				if( (i+1) == table) {					//consolidated the update process					this["playerCueClip"].transitionNextUp();					_model.tableClipsArray[i].remoteUpdate( matchID );					_model.addEventListener( PaddleEvents.XML_UPDATED, dataUpdateHandler );				}			}		}				public function remoteLightSwitch(tableID:int):void{			trace("remote PINGED remoteLightSwitch  TABLE # " + tableID);		}		public function remotePulseCall(tableID:int):void{			trace("remote PINGED remotePulseCall TABLE # " + tableID);		}		public function remoteLastCall(tableID:int):void{			trace("remote PINGED lastCall TABLE # " + tableID);		}			//LOCALCONNECTION______________________________________________________________________________________________________________		private function setupLocalConnection():void{			main_localConnection = new LocalConnection();			main_localConnection.client = this;			main_localConnection.allowDomain("localhost");				main_localConnection.addEventListener(StatusEvent.STATUS, statusHandler);			addEventListener(Event.ENTER_FRAME, connectionUpdate);						//INIT MAIN DATA			initializeControllerData();		}				public function dataUpdateHandler(instance:PaddleEvents):void{			_model.removeEventListener( PaddleEvents.XML_UPDATED, dataUpdateHandler );			main_localConnection.send("fromMain", "updateController", _model.matchListArray as Array);		}				private function connectionUpdate(e:Event):void{			try {					main_localConnection.connect("fromControl");					e.target.removeEventListener(Event.ENTER_FRAME, connectionUpdate); 				} catch (error:ArgumentError) {					trace("Can't connect...the connection name is already being used by another SWF");				}		}				private function statusHandler(e:StatusEvent):void{			if(e.level == "status"){				trace("MAIN - data has been sent");			}else if(e.level == "error"){				trace("MAIN connFAIL");			}		}							}	}