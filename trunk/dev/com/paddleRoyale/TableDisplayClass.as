package paddleRoyale{		import paddleRoyale.PaddleRoyaleModel;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.geom.Point;	import soulwire.display.PaperSprite;		public class TableDisplayClass extends MovieClip{		private var _model:PaddleRoyaleModel;		private var _paper:PaperSprite;		private var _tempNameOutput:String;				public function TableDisplayClass() {			_model = PaddleRoyaleModel.getInstance();			this.name="tableDisplayContainer";			_paper = new PaperSprite();						_paper.name="paperObject";			_paper.back = this.tableBack;			_paper.front = this.tableFront;			_paper.pivot = new Point(.5, .5);			this.tableFront.paperObj = this.tableBack.paperObj = _paper;			this.addChild(_paper);		}						public function updateInformation(match_id:int):void		{			_tempNameOutput="";			for(var i=0; i<_model.matchListArray.length; i++)			{				if(match_id == _model.matchListArray[i].matchID)				{ //if matchID finds the right match in matchListArray do next steps										for(var j=0; j<_model.playerNameList.length; j++)					{						if(_model.playerNameList[j].playerID == _model.matchListArray[i].matchPlayerTopID)						{							//trace("MatchID " + _model.matchListArray[i].matchPlayerTopID);							this.tableFront.firstNameTop.text = _model.playerNameList[j].fname;							this.tableFront.nickNameTop.text = '“' + _model.playerNameList[j].nickname + '”';							this.tableFront.lastNameTop.text = _model.playerNameList[j].lname;						}												if(_model.playerNameList[j].playerID == _model.matchListArray[i].matchPlayerBotID)						{							//trace("MatchID " + _model.matchListArray[i].matchPlayerBotID);							this.tableFront.firstNameBot.text = _model.playerNameList[j].fname;							this.tableFront.nickNameBot.text = '“' + _model.playerNameList[j].nickname + '”';							this.tableFront.lastNameBot.text = _model.playerNameList[j].lname;						}					}					break;				}			}					if(this.parent){				//trace(this.parent.parent["playerCueClip"].name);				this.parent.parent["playerCueClip"].playerCue.text = this.tableFront.firstNameTop.text.toUpperCase() + "  " + this.tableFront.nickNameTop.text + "  " + this.tableFront.lastNameTop.text.toUpperCase() + "   VS.   " + this.tableFront.firstNameBot.text.toUpperCase() + "  " + this.tableFront.nickNameBot.text+ "  " + this.tableFront.lastNameBot.text.toUpperCase();				//this.parent.parent["playerCueClip"].showNextUp();			}					}				public function remoteUpdate( matchID:int ):void{			this.updateInformation( matchID );			this.remoteSpinTable();			_paper["back"].remoteBackInput( matchID );		}				public function remoteSpinTable():void{			TweenMax.to(this._paper, Math.random() * .5 + .5, {rotationY:180*6, onComplete:faceFront})		}		public function faceFront(){			TweenMax.to(this._paper, 0, {rotationY:0});			_paper["front"].startPulseTable(0x6CB200, .5, 5);		}							}	}